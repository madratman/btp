% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by NFTOOL
% Created Thu Feb 05 20:11:00 IST 2015
%
% This script assumes these variables are defined:
%
%   inputs - input data.
%   a13 - target data.

btp = importdata('btp.mat');
inputs = btp.inputs';
A = [btp.a13 btp.a23 btp.a33 btp.a43];
for i = 1:4,
    A(:,i);
targets = A(:,i)';
% Create a Fitting Network
hiddenLayerSize = 10;
net = fitnet(hiddenLayerSize);


% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;


% Train the Network
[net,tr] = train(net,inputs,targets);

% Test the Network
outputs = net(inputs);
errors = gsubtract(targets,outputs);                                                                                                             
performance = perform(net,targets,outputs)

% View the Network
% view(net);
int2str(i);
save(strcat('weights', int2str(i), '.dat'), 'net');
end
% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, plotfit(net,inputs,targets)
%figure, plotregression(targets,outputs)
%figure, ploterrhist(errors)
